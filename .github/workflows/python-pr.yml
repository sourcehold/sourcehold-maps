# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python PR

on:
  workflow_dispatch: {}
  pull_request: {}

jobs:
  build:
    permissions:
      contents: write
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # os: [ubuntu-latest, windows-latest, macOS-latest]
        os: [windows-latest]
        platform: [x86]
        python-version: ['3.8']
        python-platform: [x86]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.python-platform }}
    - name: Enable Developer Command Prompt
      uses: ilammy/msvc-dev-cmd@v1.4.1
      with:
        arch: ${{ matrix.python-platform }}
      if: matrix.os == 'windows-latest'
    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade wheel setuptools Cython
        pip install flake8 pytest
        pip install -r requirements.txt
    - name: Lint with flake8
      shell: bash
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude examples
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude examples

    - name: Run tests
      shell: bash
      run: |
        python -m pip install pytest
        python -m pytest

    - name: Build package
      shell: bash
      run: |
        python setup.py sdist bdist_wheel

    - name: Build wheel dependencies
      shell: bash
      run: |
        python -m pip wheel . -w dist

    - name: Run pyinstaller
      shell: bash
      run: |
        python -m pip install pyinstaller
        pyinstaller --console --onefile ./sourcehold/__main__.py --name sourcehold --distpath dist/sourcehold-onefile
        pyinstaller --console --onedir ./sourcehold/__main__.py --name sourcehold --distpath dist/sourcehold-onedir

    - name: Archive packages
      uses: actions/upload-artifact@v4
      with:
        name: sourcehold-py${{ matrix.python-version }}-${{ matrix.python-platform }}-${{ matrix.os }}-${{ matrix.platform }}
        path: |
          dist/sourcehold*


  test_package:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # os: [ubuntu-latest, windows-latest, macOS-latest]
        os: [windows-latest]
        platform: [x86]
        python-version: ['3.8']
        python-platform: [x86]
    steps:
    - name: Download package
      uses: actions/download-artifact@v4.1.7
      with:
        name: sourcehold-py${{ matrix.python-version }}-${{ matrix.python-platform }}-${{ matrix.os }}-${{ matrix.platform }}
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.python-platform }}
    - name: Install wheel
      shell: bash
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade wheel setuptools
    - name: Pip install module
      run: |
        python -m pip install $(ls *.whl)
      shell: bash
    - name: Pip test module
      run: |
        python -c "import sourcehold"
      shell: bash
    - name: Pip test cli
      run: |
        echo "hello world!" | python -m sourcehold compression --compress --input - --output - | python -m sourcehold compression --decompress --input - --output -
      shell: bash
